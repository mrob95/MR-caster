pronunciation = "Python"
function_prefix = "fun"
template_prefix = "template"
method_prefix = "meth"

[functions]
"(int | integer)"       = "int"
"(iter | hitter) items" = "iteritems"
"append"                = "append"
"capitalise"            = "capitalize"
"clear"                 = "clear"
"character"             = "chr"
"copy"                  = "copy"
"count"                 = "count"
"enumerate"             = "enumerate"
"execute"               = "execute"
"extend"                = "extend"
"find all"              = "find_all"
"find"                  = "find"
"float"                 = "float"
"get"                   = "get"
"join"                  = "join"
"index"                 = "index"
"insert"                = "insert"
"items"                 = "items"
"keys"                  = "keys"
"length"                = "len"
"list"                  = "list"
"min"                   = "min"
"max"                   = "max"
"pop"                   = "pop"
"print"                 = "print"
"range"                 = "range"
"read lines"            = "readlines"
"remove"                = "remove"
"replace"               = "replace"
"reverse"               = "reverse"
"set default"           = "setdefault"
"sort"                  = "sort"
"string"                = "str"
"strip"                 = "strip"
"split"                 = "split"
"sum"                   = "sum"
"title"                 = "title"
"type"                  = "type"
"update"                = "update"
"upper"                 = "upper"
"values"                = "values"
"write"                 = "write"

[libraries]
"OS" = "os"
"(system | sis)" = "sys"
"(regular expressions | regex | ree)" = "re"

[commands]
"assign"             = " = "
"breaker"            = "break"
"class"              = ["class :", "left"]
"for each"           = ["for  in :", "left:5"]
"for loop"           = ["for i in range(0, ):", "left:2"]
"from import"        = ["from  import ", "home, right:5"]
"iffae"              = ["if :", "left"]
"import"             = "import "
"lambda"             = ["lambda :", "left"]
"lodge and"          = " and "
"lodge in"           = " in "
"lodge is"           = " is "
"lodge not"          = " not "
"lodge or"           = " or "
"return"             = "return "
"shell iffae"        = ["elif :", "left"]
"shells"             = "else:"
"value false"        = "False"
"value none"         = "None"
"value true"         = "True"
"while loop"         = ["while :", "left"]
"with open"          = ["with open() as f:", "left:7"]

[unary_methods]
"(reper | representation)" = "repr"
"string"                   = "str"
"(len | length)"           = "len"
"name"                     = "name"
"unicode"                  = "unicode"
"size of"                  = "sizeof"
"dir"                      = "dir"
"(int | integer)"          = "int"

[binary_methods]
"add"                      = "add"
"subtract"                 = "sub"
"equal"                    = "eq"
"less than"                = "lt"
"greater than"             = "gt"
"less equal"               = "le"
"greater equal"            = "ge"

[templates]
