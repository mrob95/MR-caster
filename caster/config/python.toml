pronunciation   = "Python"
title_contexts  = [".py", "python"]
function_prefix = "fun"
template_prefix = "template"
method_prefix   = "meth"
magic_prefix    = "magic"
decorator_prefix    = "atty"

[functions]
"(int | integer)"       = "int"
"(iter | hitter) items" = "iteritems"
"append"                = "append"
"apply"                 = "apply"
"capitalise"            = "capitalize"
"clear"                 = "clear"
"character"             = "chr"
"copy"                  = "copy"
"count"                 = "count"
"enumerate"             = "enumerate"
"extend"                = "extend"
"find all"              = "find_all"
"find"                  = "find"
"float"                 = "float"
"head"                  = "head"
"get attribute"         = "getattr"
"has attribute"         = "hasattr"
"join"                  = "join"
"index"                 = "index"
"insert"                = "insert"
"items"                 = "items"
"is instance"           = "isinstance"
"init"                  = "__init__"
"keys"                  = "keys"
"length"                = "len"
"list"                  = "list"
"lower"                 = "lower"
"(min | minimum)"       = "min"
"(max | maximum)"       = "max"
"pop"                   = "pop"
"print"                 = "print"
"range"                 = "range"
"read lines"            = "readlines"
"remove"                = "remove"
"replace"               = "replace"
"reverse"               = "reverse"
"set default"           = "setdefault"
"sort"                  = "sort"
"string"                = "str"
"strip"                 = "strip"
"split"                 = "split"
"sum"                   = "sum"
"title"                 = "title"
"type"                  = "type"
"update"                = "update"
"upper"                 = "upper"
"values"                = "values"
"write"                 = "write"

[commands]
"assign"              = " = "
"breaker"             = "break"
"for each"            = ["for  in ", "colon/3, left:5"]
"for loop"            = ["for i in range():", "left:2"]
"from import"         = ["from  import ", "home, right:5"]
"function"            = ["def ()", "colon/3, left:3"]
"inline if"           = [" if  else ", "left:6"]
"iffae"               = ["if ", "colon/3, left"]
"iffae not"           = ["if not ", "colon/3, left"]
"import"              = "import "
"insert long comment" = ["''''''", "left:3, enter:2, up"]
"insert doc string"   = ['""""""', "left:3, enter:2, up"]
"lambda"              = ["lambda ", "colon/3, left"]
"lodge and"           = " and "
"lodge as"            = " as "
"lodge if"            = " if "
"lodge in"            = " in "
"lodge is"            = " is "
"lodge is not"        = " is not "
"lodge not"           = " not "
"lodge not in "       = " not in "
"lodge or"            = " or "
"lodge for"           = " for "
"return"              = "return "
"shell iffae"         = ["elif ", "colon/3, left"]
"shells"              = "else:"
"value false"         = "False"
"value none"          = "None"
"value true"          = "True"
"while loop"          = ["while ", "colon/3, left"]
"with open"           = ["with open() as f", "colon/3, left:7"]

[unary_methods]
"(int | integer)"          = "int"
"(iter | iterator)"        = "iter"
"(len | length)"           = "len"
"(negation | negative)"    = "neg"
"(non zero | boolean)"     = "nonzero"
"(reper | representation)" = "repr"
"absolute"                 = "abs"
"ceiling"                  = "ceil"
"call"                  = "call"
"dir"                      = "dir"
"enter"                    = "enter"
"floor"                    = "floor"
"invert"                   = "invert"
"name"                     = "name"
"new"                      = "new"
"positive"                 = "pos"
"size of"                  = "sizeof"
"string"                   = "str"
"truncate"                 = "trunc"
"unicode"                  = "unicode"

[binary_methods]
"add"                      = "add"
"subtract"                 = "sub"
"multiply"                 = "mul"
"divide"                   = "div"
"floor divide"             = "floordiv"
"equal"                    = "eq"
"not equal"                = "ne"
"less than"                = "lt"
"greater than"             = "gt"
"less equal"               = "le"
"greater equal"            = "ge"
"modulo"                   = "mod"
"power"                    = "pow"
"and"                      = "and"
"or"                       = "or"
"ex or"                    = "xor"
"left [bitwise] shift"     = "lshift"
"right [bitwise] shift"    = "rshift"

[misc_methods]
"init"             = ["init", "self"]
"new"              = ["new", "cls"]
"delete"           = ["del", "self"]
"get attribute"    = ["getattr", "self, name"]
"delete attribute" = ["delattr", "self, name"]
"set attribute"    = ["setattr", "self, name, value"]
"get item"         = ["getitem", "self, key"]
"set item"         = ["setitem", "self, key, value"]
"delete item"      = ["delitem", "self, key"]
"contains"         = ["contains", "self, item"]
"missing"          = ["missing", "self, key"]
"round"            = ["round", "self, n"]
"exit"             = ["exit", "type, value, traceback"]

[decorators]
"data class" = "dataclass"
"property" = "property"
"setter" = [".setter", "left:7"]

[exceptions]
"arithmetic"         = " ArithmeticError"
"assertion"          = " AssertionError"
"environment"        = " EnvironmentError"
"EOF"                = " EOFError"
"exception"          = " Exception"
"floating-point"     = " FloatingPointError"
"import"             = " ImportError"
"index"              = " IndexError"
"IO"                 = " IOError"
"key"                = " KeyError"
"keyboard interrupt" = " KeyboardInterrupt"
"lookup"             = " LookupError"
"name"               = " NameError"
"not implemented"    = " NotImplementedError"
"OS"                 = " OSError"
"overflow"           = " OverflowError"
"runtime"            = " RuntimeError"
"standard"           = " StandardError"
"stop iteration"     = " StopIteration"
"syntax"             = " SyntaxError"
"system exit"        = " SystemExit"
"type"               = " TypeError"
"unbound local"      = " UnboundLocalError"
"value"              = " ValueError"
"zero division"      = " ZeroDivisionError"

[cheatsheets]
"numb pie"           = "numpy"
"pandas"             = "pandas"
"sigh pie"           = "scipy"
"sigh [kit] learn"   = "sklearn"

[templates]
