[os]
"pronunciation"               = "OS"

[shlex]
"pronunciation" = "shlex"
"split" = ["shlex.split()", "left"]

[re]
"pronunciation"               = "(regular expressions | regex)"
"search"                      = ["re.search(r\"\", )", "left:4"]
"match"                       = ["re.match(r\"\", )", "left:4"]
"findall"                     = ["re.findall(r\"\", )", "left:4"]
"compile"                     = ["re.compile(r\"\")", "left:2"]
"(sub | substitute)"          = ["re.sub(r\"\", , )", "left:6"]

[sys]
"pronunciation"               = "(system | sis)"
"path append"                 = ["sys.path.append()", "left"]

[click]
"pronunciation"           = "click"
"command"                 = "@click.command()"
"echo"                    = ["click.echo()", "left"]
"option"                  = ["@click.option(\n'-',\nhelp=\n)", "up:2, end, left:2"]

[numpy]
"pronunciation"               = "numb pie"
"import_as"                   = "np"
"array"                       = ["np.array()", "left"]
"stack"                       = ["np.stack()", "left"]
"log"                         = ["np.log()", "left"]
"arrange"                     = ["np.arrange()", "left"]
"zeros"                       = ["np.zeros()", "left"]
"matrix"                      = ["np.matrix()", "left"]
"gen from text"               = ["np.genfromtext(, delimiter=\"\")", "left:15"]
#
"as type"                     = ["astype()", "left"]
"(dee | data) type"           = ["dtype"]

[pandas]
"pronunciation"               = "pandas"
"import_as"                   = "pd"
"(con cat | concatenate)"     = ["pd.concat()", "left"]
"data frame"                  = ["pd.DataFrame()", "left"]
"categorical"                  = ["pd.Categorical()", "left"]
"melt"                        = ["pd.melt()", "left"]
"merge"                       = ["pd.merge()", "left"]
"read CSV"                    = ["pd.read_csv()", "left"]
"read excel"                  = ["pd.read_excel()", "left"]
"read feather"                = ["pd.read_feather()", "left"]
"series"                      = ["pd.Series()", "left"]
"to date time"                = ["pd.to_datetime()", "left"]
"to numeric"                  = ["pd.to_numeric()", "left"]
#
"all"                         = ["all()", ""]
"columns"                     = ["columns", ""]
"D types"                     = ["dtypes", ""]
"describe"                    = ["describe()", ""]
"drop duplicates"             = ["drop_duplicates()", ""]
"drop NA"                     = ["dropna()", ""]
"head"                        = ["head()", ""]
"index"                       = ["index", ""]
"info"                        = ["info()", ""]
"not null"                    = ["notnull()", ""]
"is null"                     = ["isnull()", ""]
"plot"                        = ["plot()", ""]
"reset index"                 = ["reset_index()", ""]
"shape"                       = ["shape", ""]
"tail"                        = ["tail()", ""]
"value counts"                = ["value_counts()", ""]
#
"apply"                       = ["apply()", "left"]
"assign"                      = ["assign()", "left"]
"as type"                     = ["astype()", "left"]
"count"                       = ["count()", "left"]
"drop"                        = ["drop()", "left"]
"fill NA"                     = ["fillna()", "left"]
"filter"                      = ["filter()", "left"]
"group by"                    = ["groupby()", "left"]
"I lock"                      = ["iloc[]", "left"]
"lock"                        = ["loc[]", "left"]
"max"                         = ["max()", "left"]
"mean"                        = ["mean()", "left"]
"median"                      = ["median()", "left"]
"min"                         = ["min()", "left"]
"en largest"                  = ["nlargest()", "left"]
"en smallest"                 = ["nsmallest()", "left"]
"pivot"                       = ["pivot()", "left"]
"pivot table"                 = ["pivot_table()", "left"]
"Q cut"                       = ["qcut()", "left"]
"quantile"                    = ["quantile()", "left"]
"query"                       = ["query()", "left"]
"rename"                      = ["rename()", "left"]
"resample"                    = ["resample()", "left"]
"sample"                      = ["sample()", "left"]
"set index"                   = ["set_index()", "left"]
"sort values"                 = ["sort_values()", "left"]
"standard"                    = ["std()", "left"]
"sum"                         = ["sum()", "left"]
"to CSV"                      = ["to_csv()", "left"]
"to excel"                    = ["to_excel()", "left"]
"to feather"                  = ["to_feather()", "left"]
#
"axis one"                    = "axis=1"
"inplace true"                = "inplace=True"

[matplotlib]
"name"                        = "matplotlib.pyplot"
"pronunciation"               = "[mat] plot [lib]"
"import_as"                   = "plt"
"show"                        = ["plt.show()", "left"]
"subplots"                    = ["plt.subplots()", "left"]
"title"                       = ["plt.title()", "left"]
"ex label"                    = ["plt.xlabel()", "left"]
"ex limit"                    = ["plt.xlim()", "left"]
"why label"                   = ["plt.ylabel()", "left"]
"why limit"                   = ["plt.ylim()", "left"]
#
"plot"                        = ["plot()", "left"]
"scatter"                     = ["scatter()", "left"]

[sklearn]
"pronunciation"                        = "sigh [kit] learn"
"random Forest regressor"              = ["RandomForestRegressor()", "left"]
"random Forest classifier"             = ["RandomForestClassifier()", "left"]
"linear regression"                    = ["LinearRegression()", "left"]
"naive bayes"                          = ["GaussianNB()", "left"]
"K nearest neighbours"                 = ["neighbors.KNeighborsClassifier()", "left"]
"K means [clustering]"                 = ["KMeans()", "left"]
"(support vector machine | SVM)"       = ["SVC()", "left"]
"(principal component analysis | PCA)" = ["PCA()", "left"]
#
"fit"                                  = ["fit()", "left"]
"score"                                = ["score()", "left"]
"accuracy score"                       = ["accuracy_score()", "left"]
"predict"                                = ["predict()", "left"]
"train test split"                                = ["train_test_split()", "left"]

[webbrowser]
"pronunciation" = "web browser"
"open new tab" = ["webbrowser.open_new_tab()", "left"]

[itertools]
"pronunciation" = "iter tools"
"accumulate"   = ["accumulate()", "left"]
"chain"        = ["chain()", "left"]
"combinations" = ["combinations()", "left"]
"compress"     = ["compress()", "left"]
"cycle"        = ["cycle()", "left"]
"drop while"   = ["dropwhile()", "left"]
"group by"     = ["groupby()", "left"]
"I filter"     = ["ifilter()", "left"]
"I map"        = ["imap()", "left"]
"I slice"      = ["islice()", "left"]
"I zip"        = ["izip()", "left"]
"permutations" = ["permutations()", "left"]
"product"      = ["product()", "left"]
"repeat"       = ["repeat()", "left"]
"take while"   = ["takewhile()", "left"]
"tee"          = ["tee()", "left"]
